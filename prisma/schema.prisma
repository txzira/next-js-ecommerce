// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  firstName String
  lastName  String
  role      UserRole @default(CUSTOMER)
  password  String   @db.Char(60)
  verifiedByAdmin  Boolean @default(false)
  verifiedEmail Boolean @default(false)
  resetToken String?
  createdAt       DateTime @default(now())
  Orders    Order[]
  carts Cart[]
}

enum UserRole {
  ADMIN
  CUSTOMER

}
model Product {
  id       Int     @id @default(autoincrement())
  name     String @unique
  price    Float
  productCategoryId Int? 
  category Category? @relation(fields: [productCategoryId], references: [id])
  productVariants ProductVariant[] 
  active Boolean @default(true)
  // order orderProduct[] 
  cartItem CartItem []
  @@index([productCategoryId])
}
model ProductVariant{
  id Int @id @default(autoincrement())
  productId Int
  product Product @relation(fields:[productId], references: [id])
  name String
  price Float
  available Boolean @default(true)
  cartItems CartItem[]
  @@index([productId])

}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  product Product[]
}

model Cart{
  id Int @id @default(autoincrement())
  userId Int
  customer User @relation(fields: [userId], references: [id])
  currentCart Boolean @default(true)
  cartItems CartItem[]
  cartTotal Float
  order Order?
  @@index([userId])
}
model CartItem{
  id Int @id @default(autoincrement())
  cartId Int
  cart Cart @relation(fields:[cartId], references: [id])
  productId Int 
  product Product @relation(fields:[productId], references:[id])
  productName String
  quantity Int
  price Float
  variantId Int @default(0)
  variant ProductVariant?  @relation(fields: [variantId], references: [id])
  variantName String?
  @@unique([cartId,productId,variantId])

  @@index([id])
  @@index([cartId])
  @@index([productId])
  @@index([variantId])

}

model Image {
  assetId  String    @id
  publicId String
  url      String
  order Order[]
}


model Order {
  id         Int     @id @default(autoincrement())
  // products   orderProduct[]
  customerId Int
  customer   User      @relation(fields: [customerId], references: [id])
  cartId Int
  cart Cart @relation(fields: [cartId], references: [id])
  amount     Float
  date       DateTime @default(now())
  shippingId Int @unique
  shipping ShippingAddress @relation(fields: [shippingId], references: [id])
  image    Image?   @relation(fields: [imageId], references: [assetId])
  imageId  String?
  isCash Boolean @default(false)
  approved Boolean @default(false)
  trackingNumber String?
  @@index([customerId])
  @@unique([cartId])
  @@index([imageId])
}

model CryptoWallet{
  id Int @id @default(autoincrement())
  address String
  active Boolean @default(false)
  type CryptoWalletType @relation(fields: [typeId], references: [id])
  typeId Int
  @@index([typeId])
  @@unique([address,typeId])
}

model CryptoWalletType{
  id Int @id @default(autoincrement())
  name String @unique
  wallets CryptoWallet[]
}

model ShippingAddress{
  id Int @id @default(autoincrement())
  firstName String 
  lastName String
  streetAddress String
  streetAddress2 String?
  city String
  state String
  zipCode String
  order Order?
}